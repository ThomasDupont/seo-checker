"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withCost = exports.make = void 0;
var Duration = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("../Duration.js"));
var Effect = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("../Effect.js"));
var FiberRef = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("../FiberRef.js"));
var _GlobalValue = /*#__PURE__*/require("../GlobalValue.js");
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function (e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
/** @internal */
const make = ({
  algorithm = "token-bucket",
  interval,
  limit
}) => {
  switch (algorithm) {
    case "fixed-window":
      {
        return fixedWindow(limit, interval);
      }
    case "token-bucket":
      {
        return tokenBucket(limit, interval);
      }
  }
};
exports.make = make;
const tokenBucket = (limit, window) => Effect.gen(function* (_) {
  const millisPerToken = Math.ceil(Duration.toMillis(window) / limit);
  const semaphore = yield* _(Effect.makeSemaphore(limit));
  const latch = yield* Effect.makeSemaphore(0);
  const refill = Effect.sleep(millisPerToken).pipe(Effect.zipRight(latch.releaseAll), Effect.zipRight(semaphore.release(1)), Effect.flatMap(free => free === limit ? Effect.void : refill));
  yield* _(latch.take(1), Effect.zipRight(refill), Effect.forever, Effect.forkScoped, Effect.interruptible);
  const take = Effect.uninterruptibleMask(restore => Effect.flatMap(FiberRef.get(currentCost), cost => Effect.zipRight(restore(semaphore.take(cost)), latch.release(1))));
  return effect => Effect.zipRight(take, effect);
});
const fixedWindow = (limit, window) => Effect.gen(function* (_) {
  const semaphore = yield* _(Effect.makeSemaphore(limit));
  const latch = yield* _(Effect.makeSemaphore(0));
  yield* _(latch.take(1), Effect.zipRight(Effect.sleep(window)), Effect.zipRight(latch.releaseAll), Effect.zipRight(semaphore.releaseAll), Effect.forever, Effect.forkScoped, Effect.interruptible);
  const take = Effect.uninterruptibleMask(restore => Effect.flatMap(FiberRef.get(currentCost), cost => Effect.zipRight(restore(semaphore.take(cost)), latch.release(1))));
  return effect => Effect.zipRight(take, effect);
});
/** @internal */
const currentCost = /*#__PURE__*/(0, _GlobalValue.globalValue)( /*#__PURE__*/Symbol.for("effect/RateLimiter/currentCost"), () => FiberRef.unsafeMake(1));
/** @internal */
const withCost = cost => Effect.locally(currentCost, cost);
exports.withCost = withCost;
//# sourceMappingURL=rateLimiter.js.map