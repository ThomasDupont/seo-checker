"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.refresh = exports.manual = exports.get = exports.auto = exports.ResourceTypeId = void 0;
var _Function = /*#__PURE__*/require("../Function.js");
var core = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./core.js"));
var fiberRuntime = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./fiberRuntime.js"));
var _schedule = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./schedule.js"));
var scopedRef = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./scopedRef.js"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function (e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
/** @internal */
const ResourceSymbolKey = "effect/Resource";
/** @internal */
const ResourceTypeId = exports.ResourceTypeId = /*#__PURE__*/Symbol.for(ResourceSymbolKey);
const resourceVariance = {
  /* c8 ignore next */
  _E: _ => _,
  /* c8 ignore next */
  _A: _ => _
};
/** @internal */
const auto = (acquire, policy) => core.tap(manual(acquire), manual => fiberRuntime.acquireRelease((0, _Function.pipe)(refresh(manual), _schedule.schedule_Effect(policy), core.interruptible, fiberRuntime.forkDaemon), core.interruptFiber));
/** @internal */
exports.auto = auto;
const manual = acquire => core.flatMap(core.context(), env => (0, _Function.pipe)(scopedRef.fromAcquire(core.exit(acquire)), core.map(ref => ({
  [ResourceTypeId]: resourceVariance,
  scopedRef: ref,
  acquire: core.provideContext(acquire, env)
}))));
/** @internal */
exports.manual = manual;
const get = self => core.flatMap(scopedRef.get(self.scopedRef), _Function.identity);
/** @internal */
exports.get = get;
const refresh = self => scopedRef.set(self.scopedRef, core.map(self.acquire, core.exitSucceed));
exports.refresh = refresh;
//# sourceMappingURL=resource.js.map