"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateSomeEffect = exports.updateEffect = exports.updateAndGetEffect = exports.modifySomeEffect = exports.modifyEffect = exports.modify = exports.getAndUpdateSomeEffect = exports.getAndUpdateEffect = void 0;
var _Function = /*#__PURE__*/require("../Function.js");
var Option = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("../Option.js"));
var core = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./core.js"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function (e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
/** @internal */
const getAndUpdateEffect = exports.getAndUpdateEffect = /*#__PURE__*/(0, _Function.dual)(2, (self, f) => self.modifyEffect(value => core.map(f(value), result => [value, result])));
/** @internal */
const getAndUpdateSomeEffect = exports.getAndUpdateSomeEffect = /*#__PURE__*/(0, _Function.dual)(2, (self, pf) => self.modifyEffect(value => {
  const result = pf(value);
  switch (result._tag) {
    case "None":
      {
        return core.succeed([value, value]);
      }
    case "Some":
      {
        return core.map(result.value, newValue => [value, newValue]);
      }
  }
}));
/** @internal */
const modify = exports.modify = /*#__PURE__*/(0, _Function.dual)(2, (self, f) => self.modify(f));
/** @internal */
const modifyEffect = exports.modifyEffect = /*#__PURE__*/(0, _Function.dual)(2, (self, f) => self.modifyEffect(f));
/** @internal */
const modifySomeEffect = exports.modifySomeEffect = /*#__PURE__*/(0, _Function.dual)(3, (self, fallback, pf) => self.modifyEffect(value => (0, _Function.pipe)(pf(value), Option.getOrElse(() => core.succeed([fallback, value])))));
/** @internal */
const updateEffect = exports.updateEffect = /*#__PURE__*/(0, _Function.dual)(2, (self, f) => self.modifyEffect(value => core.map(f(value), result => [undefined, result])));
/** @internal */
const updateAndGetEffect = exports.updateAndGetEffect = /*#__PURE__*/(0, _Function.dual)(2, (self, f) => self.modifyEffect(value => core.map(f(value), result => [result, result])));
/** @internal */
const updateSomeEffect = exports.updateSomeEffect = /*#__PURE__*/(0, _Function.dual)(2, (self, pf) => self.modifyEffect(value => {
  const result = pf(value);
  switch (result._tag) {
    case "None":
      {
        return core.succeed([void 0, value]);
      }
    case "Some":
      {
        return core.map(result.value, a => [void 0, a]);
      }
  }
}));
//# sourceMappingURL=synchronizedRef.js.map