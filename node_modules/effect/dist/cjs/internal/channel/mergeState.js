"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.match = exports.isRightDone = exports.isMergeState = exports.isLeftDone = exports.isBothRunning = exports.RightDone = exports.MergeStateTypeId = exports.LeftDone = exports.BothRunning = void 0;
var _Function = /*#__PURE__*/require("../../Function.js");
var _Predicate = /*#__PURE__*/require("../../Predicate.js");
var OpCodes = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("../opCodes/channelMergeState.js"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function (e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
/** @internal */
const MergeStateSymbolKey = "effect/ChannelMergeState";
/** @internal */
const MergeStateTypeId = exports.MergeStateTypeId = /*#__PURE__*/Symbol.for(MergeStateSymbolKey);
/** @internal */
const proto = {
  [MergeStateTypeId]: MergeStateTypeId
};
/** @internal */
const BothRunning = (left, right) => {
  const op = Object.create(proto);
  op._tag = OpCodes.OP_BOTH_RUNNING;
  op.left = left;
  op.right = right;
  return op;
};
/** @internal */
exports.BothRunning = BothRunning;
const LeftDone = f => {
  const op = Object.create(proto);
  op._tag = OpCodes.OP_LEFT_DONE;
  op.f = f;
  return op;
};
/** @internal */
exports.LeftDone = LeftDone;
const RightDone = f => {
  const op = Object.create(proto);
  op._tag = OpCodes.OP_RIGHT_DONE;
  op.f = f;
  return op;
};
/** @internal */
exports.RightDone = RightDone;
const isMergeState = u => (0, _Predicate.hasProperty)(u, MergeStateTypeId);
/** @internal */
exports.isMergeState = isMergeState;
const isBothRunning = self => {
  return self._tag === OpCodes.OP_BOTH_RUNNING;
};
/** @internal */
exports.isBothRunning = isBothRunning;
const isLeftDone = self => {
  return self._tag === OpCodes.OP_LEFT_DONE;
};
/** @internal */
exports.isLeftDone = isLeftDone;
const isRightDone = self => {
  return self._tag === OpCodes.OP_RIGHT_DONE;
};
/** @internal */
exports.isRightDone = isRightDone;
const match = exports.match = /*#__PURE__*/(0, _Function.dual)(2, (self, {
  onBothRunning,
  onLeftDone,
  onRightDone
}) => {
  switch (self._tag) {
    case OpCodes.OP_BOTH_RUNNING:
      {
        return onBothRunning(self.left, self.right);
      }
    case OpCodes.OP_LEFT_DONE:
      {
        return onLeftDone(self.f);
      }
    case OpCodes.OP_RIGHT_DONE:
      {
        return onRightDone(self.f);
      }
  }
});
//# sourceMappingURL=mergeState.js.map