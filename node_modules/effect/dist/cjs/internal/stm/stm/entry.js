"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unsafeSet = exports.unsafeGet = exports.make = exports.isValid = exports.isInvalid = exports.isChanged = exports.copy = exports.commit = void 0;
var Versioned = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./versioned.js"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function (e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
/** @internal */
const make = (ref, isNew) => ({
  ref,
  isNew,
  isChanged: false,
  expected: ref.versioned,
  newValue: ref.versioned.value
});
exports.make = make;
const unsafeGet = self => {
  return self.newValue;
};
/** @internal */
exports.unsafeGet = unsafeGet;
const unsafeSet = (self, value) => {
  self.isChanged = true;
  self.newValue = value;
};
/** @internal */
exports.unsafeSet = unsafeSet;
const commit = self => {
  self.ref.versioned = new Versioned.Versioned(self.newValue);
};
/** @internal */
exports.commit = commit;
const copy = self => ({
  ref: self.ref,
  isNew: self.isNew,
  isChanged: self.isChanged,
  expected: self.expected,
  newValue: self.newValue
});
/** @internal */
exports.copy = copy;
const isValid = self => {
  return self.ref.versioned === self.expected;
};
/** @internal */
exports.isValid = isValid;
const isInvalid = self => {
  return self.ref.versioned !== self.expected;
};
/** @internal */
exports.isInvalid = isInvalid;
const isChanged = self => {
  return self.isChanged;
};
exports.isChanged = isChanged;
//# sourceMappingURL=entry.js.map