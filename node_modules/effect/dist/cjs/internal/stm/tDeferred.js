"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.succeed = exports.poll = exports.make = exports.fail = exports.done = exports._await = exports.TDeferredTypeId = void 0;
var Either = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("../../Either.js"));
var _Function = /*#__PURE__*/require("../../Function.js");
var Option = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("../../Option.js"));
var core = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./core.js"));
var stm = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./stm.js"));
var tRef = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./tRef.js"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function (e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
/** @internal */
const TDeferredSymbolKey = "effect/TDeferred";
/** @internal */
const TDeferredTypeId = exports.TDeferredTypeId = /*#__PURE__*/Symbol.for(TDeferredSymbolKey);
/** @internal */
const tDeferredVariance = {
  /* c8 ignore next */
  _A: _ => _,
  /* c8 ignore next */
  _E: _ => _
};
/** @internal */
class TDeferredImpl {
  ref;
  [TDeferredTypeId] = tDeferredVariance;
  constructor(ref) {
    this.ref = ref;
  }
}
/** @internal */
const _await = self => stm.flatten(stm.collect(tRef.get(self.ref), option => Option.isSome(option) ? Option.some(stm.fromEither(option.value)) : Option.none()));
/** @internal */
exports._await = _await;
const done = exports.done = /*#__PURE__*/(0, _Function.dual)(2, (self, either) => core.flatMap(tRef.get(self.ref), Option.match({
  onNone: () => core.zipRight(tRef.set(self.ref, Option.some(either)), core.succeed(true)),
  onSome: () => core.succeed(false)
})));
/** @internal */
const fail = exports.fail = /*#__PURE__*/(0, _Function.dual)(2, (self, error) => done(self, Either.left(error)));
/** @internal */
const make = () => core.map(tRef.make(Option.none()), ref => new TDeferredImpl(ref));
/** @internal */
exports.make = make;
const poll = self => tRef.get(self.ref);
/** @internal */
exports.poll = poll;
const succeed = exports.succeed = /*#__PURE__*/(0, _Function.dual)(2, (self, value) => done(self, Either.right(value)));
//# sourceMappingURL=tDeferred.js.map